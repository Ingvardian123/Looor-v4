package com.uraniumcraft.centrifuge;

import com.uraniumcraft.effects.VisualEffects;
import com.uraniumcraft.items.UraniumItems;
import com.uraniumcraft.UraniumPlugin;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class Centrifuge {
    private final UUID ownerId;
    private final Location location;
    private final UraniumPlugin plugin;
    private boolean isProcessing;
    private long processStartTime;
    private final long processDuration = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    private Map<Material, Integer> inputMaterials;
    private Map<Material, Integer> outputMaterials;
    private int processCount;
    private BukkitTask processingTask;
    private BukkitTask effectsTask;
    
    public Centrifuge(UUID ownerId, Location location, UraniumPlugin plugin) {
        this.ownerId = ownerId;
        this.location = location.clone();
        this.plugin = plugin;
        this.isProcessing = false;
        this.processStartTime = 0;
        this.inputMaterials = new HashMap<>();
        this.outputMaterials = new HashMap<>();
        this.processCount = 0;
        
        // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏
        buildCentrifugeStructure();
    }
    
    private void buildCentrifugeStructure() {
        World world = location.getWorld();
        if (world == null) return;
        
        int x = location.getBlockX();
        int y = location.getBlockY();
        int z = location.getBlockZ();
        
        // –û—Å–Ω–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏ (3x3)
        for (int dx = -1; dx <= 1; dx++) {
            for (int dz = -1; dz <= 1; dz++) {
                if (dx == 0 && dz == 0) {
                    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–ª–æ–∫ - –¥–∏—Å–ø–µ–Ω—Å–µ—Ä
                    world.getBlockAt(x + dx, y, z + dz).setType(Material.DISPENSER);
                } else {
                    // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –∂–µ–ª–µ–∑–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                    world.getBlockAt(x + dx, y, z + dz).setType(Material.IRON_BLOCK);
                }
            }
        }
        
        // –°—Ç–µ–Ω–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏
        world.getBlockAt(x - 1, y + 1, z - 1).setType(Material.IRON_BLOCK);
        world.getBlockAt(x + 1, y + 1, z - 1).setType(Material.IRON_BLOCK);
        world.getBlockAt(x - 1, y + 1, z + 1).setType(Material.IRON_BLOCK);
        world.getBlockAt(x + 1, y + 1, z + 1).setType(Material.IRON_BLOCK);
        
        // –°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ —Å—Ç–µ–Ω–∫–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        world.getBlockAt(x, y + 1, z - 1).setType(Material.GLASS);
        world.getBlockAt(x, y + 1, z + 1).setType(Material.GLASS);
        world.getBlockAt(x - 1, y + 1, z).setType(Material.GLASS);
        world.getBlockAt(x + 1, y + 1, z).setType(Material.GLASS);
        
        // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
        for (int dx = -1; dx <= 1; dx++) {
            for (int dz = -1; dz <= 1; dz++) {
                if (dx == 0 && dz == 0) {
                    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–ª–æ–∫ - –≤–æ—Ä–æ–Ω–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    world.getBlockAt(x + dx, y + 2, z + dz).setType(Material.HOPPER);
                } else {
                    // –ö—Ä—ã—à–∞ –∏–∑ –∂–µ–ª–µ–∑–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                    world.getBlockAt(x + dx, y + 2, z + dz).setType(Material.IRON_BLOCK);
                }
            }
        }
        
        // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
        world.getBlockAt(x - 2, y + 1, z).setType(Material.REDSTONE_BLOCK);
        world.getBlockAt(x + 2, y + 1, z).setType(Material.REDSTONE_BLOCK);
        world.getBlockAt(x, y + 1, z - 2).setType(Material.REDSTONE_BLOCK);
        world.getBlockAt(x, y + 1, z + 2).setType(Material.REDSTONE_BLOCK);
        
        // –û—Å–≤–µ—â–µ–Ω–∏–µ
        world.getBlockAt(x, y + 3, z).setType(Material.GLOWSTONE);
        
        // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
        world.getBlockAt(x - 2, y, z - 1).setType(Material.CRAFTING_TABLE);
        world.getBlockAt(x - 2, y, z + 1).setType(Material.FURNACE);
        world.getBlockAt(x + 2, y, z - 1).setType(Material.ENCHANTING_TABLE);
        world.getBlockAt(x + 2, y, z + 1).setType(Material.ANVIL);
    }
    
    public boolean isValidStructure() {
        World world = location.getWorld();
        if (world == null) return false;
        
        int x = location.getBlockX();
        int y = location.getBlockY();
        int z = location.getBlockZ();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        return world.getBlockAt(x, y, z).getType() == Material.DISPENSER &&
               world.getBlockAt(x, y + 2, z).getType() == Material.HOPPER &&
               world.getBlockAt(x - 1, y, z - 1).getType() == Material.IRON_BLOCK &&
               world.getBlockAt(x + 1, y, z + 1).getType() == Material.IRON_BLOCK;
    }
    
    public boolean startCentrifuge(Player player) {
        if (isProcessing) {
            player.sendMessage(ChatColor.RED + "–¶–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            return false;
        }
        
        if (!ownerId.equals(player.getUniqueId()) && !player.hasPermission("uraniumcraft.admin")) {
            player.sendMessage(ChatColor.RED + "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∞!");
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞
        Map<Material, Integer> materials = extractMaterialsFromPlayer(player);
        
        if (materials.isEmpty()) {
            player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏—Ä–æ–≤–∞–Ω–∏—è!");
            player.sendMessage(ChatColor.YELLOW + "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: —Ä—É–¥—ã, –¥—Ä–µ–≤–Ω–∏–µ –æ–±–ª–æ–º–∫–∏");
            return false;
        }
        
        return startCentrifugation(materials);
    }
    
    private Map<Material, Integer> extractMaterialsFromPlayer(Player player) {
        Map<Material, Integer> materials = new HashMap<>();
        
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && isCentrifugableMaterial(item.getType())) {
                materials.put(item.getType(), materials.getOrDefault(item.getType(), 0) + item.getAmount());
                player.getInventory().remove(item);
            }
        }
        
        return materials;
    }
    
    public boolean startCentrifugation(Map<Material, Integer> materials) {
        if (isProcessing) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (!hasValidMaterials(materials)) {
            return false;
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        this.inputMaterials = new HashMap<>(materials);
        this.isProcessing = true;
        this.processStartTime = System.currentTimeMillis();
        this.processCount++;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        calculateOutputMaterials();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        startProcessingEffects();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        Player owner = Bukkit.getPlayer(ownerId);
        if (owner != null) {
            owner.sendMessage(ChatColor.GREEN + "üîÑ –¶–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!");
            owner.sendMessage(ChatColor.YELLOW + "‚è±Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º—ë—Ç 5 –º–∏–Ω—É—Ç...");
            owner.sendMessage(ChatColor.GRAY + "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: " + formatMaterials(inputMaterials));
            owner.playSound(owner.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 1.0f, 1.2f);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        processingTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (isProcessing && System.currentTimeMillis() - processStartTime >= processDuration) {
                    completeProcess();
                    cancel();
                }
            }
        }.runTaskTimer(plugin, 20L, 20L);
        
        return true;
    }
    
    private boolean hasValidMaterials(Map<Material, Integer> materials) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏—Ä–æ–≤–∞—Ç—å
        for (Material material : materials.keySet()) {
            if (isCentrifugableMaterial(material)) {
                return true;
            }
        }
        return false;
    }
    
    private boolean isCentrifugableMaterial(Material material) {
        return material == Material.IRON_ORE || material == Material.DEEPSLATE_IRON_ORE ||
               material == Material.GOLD_ORE || material == Material.DEEPSLATE_GOLD_ORE ||
               material == Material.COPPER_ORE || material == Material.DEEPSLATE_COPPER_ORE ||
               material == Material.COAL_ORE || material == Material.DEEPSLATE_COAL_ORE ||
               material == Material.REDSTONE_ORE || material == Material.DEEPSLATE_REDSTONE_ORE ||
               material == Material.LAPIS_ORE || material == Material.DEEPSLATE_LAPIS_ORE ||
               material == Material.DIAMOND_ORE || material == Material.DEEPSLATE_DIAMOND_ORE ||
               material == Material.EMERALD_ORE || material == Material.DEEPSLATE_EMERALD_ORE ||
               material == Material.NETHER_QUARTZ_ORE || material == Material.NETHER_GOLD_ORE ||
               material == Material.ANCIENT_DEBRIS;
    }
    
    private void calculateOutputMaterials() {
        outputMaterials.clear();
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –£–†–ê–ù!
        int totalOres = inputMaterials.values().stream().mapToInt(Integer::intValue).sum();
        outputMaterials.put(Material.GUNPOWDER, Math.max(1, totalOres / 4)); // –£—Ä–∞–Ω–æ–≤–∞—è –ø—ã–ª—å
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        for (Map.Entry<Material, Integer> entry : inputMaterials.entrySet()) {
            Material input = entry.getKey();
            int amount = entry.getValue();
            
            switch (input) {
                case IRON_ORE:
                case DEEPSLATE_IRON_ORE:
                    outputMaterials.put(Material.IRON_INGOT, amount * 2);
                    outputMaterials.put(Material.IRON_NUGGET, amount * 4);
                    break;
                    
                case GOLD_ORE:
                case DEEPSLATE_GOLD_ORE:
                case NETHER_GOLD_ORE:
                    outputMaterials.put(Material.GOLD_INGOT, amount * 2);
                    outputMaterials.put(Material.GOLD_NUGGET, amount * 6);
                    break;
                    
                case COPPER_ORE:
                case DEEPSLATE_COPPER_ORE:
                    outputMaterials.put(Material.COPPER_INGOT, amount * 3);
                    outputMaterials.put(Material.RAW_COPPER, amount * 2);
                    break;
                    
                case COAL_ORE:
                case DEEPSLATE_COAL_ORE:
                    outputMaterials.put(Material.COAL, amount * 3);
                    outputMaterials.put(Material.CHARCOAL, amount * 2);
                    break;
                    
                case REDSTONE_ORE:
                case DEEPSLATE_REDSTONE_ORE:
                    outputMaterials.put(Material.REDSTONE, amount * 6);
                    outputMaterials.put(Material.GLOWSTONE_DUST, amount);
                    break;
                    
                case LAPIS_ORE:
                case DEEPSLATE_LAPIS_ORE:
                    outputMaterials.put(Material.LAPIS_LAZULI, amount * 8);
                    outputMaterials.put(Material.BLUE_DYE, amount * 2);
                    break;
                    
                case DIAMOND_ORE:
                case DEEPSLATE_DIAMOND_ORE:
                    outputMaterials.put(Material.DIAMOND, amount * 2);
                    outputMaterials.put(Material.COAL, amount * 4);
                    break;
                    
                case EMERALD_ORE:
                case DEEPSLATE_EMERALD_ORE:
                    outputMaterials.put(Material.EMERALD, amount * 2);
                    outputMaterials.put(Material.GREEN_DYE, amount * 3);
                    // –ë–æ–ª—å—à–µ —É—Ä–∞–Ω–æ–≤–æ–π –ø—ã–ª–∏ –æ—Ç –∏–∑—É–º—Ä—É–¥–Ω–æ–π —Ä—É–¥—ã (—É—Ä–∞–Ω–æ–≤–∞—è —Ä—É–¥–∞)
                    outputMaterials.put(Material.GUNPOWDER, outputMaterials.getOrDefault(Material.GUNPOWDER, 0) + amount * 3);
                    break;
                    
                case NETHER_QUARTZ_ORE:
                    outputMaterials.put(Material.QUARTZ, amount * 4);
                    outputMaterials.put(Material.GLOWSTONE_DUST, amount * 2);
                    break;
                    
                case ANCIENT_DEBRIS:
                    outputMaterials.put(Material.NETHERITE_SCRAP, amount * 2);
                    outputMaterials.put(Material.GOLD_NUGGET, amount * 8);
                    // –ë–æ–ª—å—à–µ —É—Ä–∞–Ω–æ–≤–æ–π –ø—ã–ª–∏ –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –æ–±–ª–æ–º–∫–æ–≤
                    outputMaterials.put(Material.GUNPOWDER, outputMaterials.getOrDefault(Material.GUNPOWDER, 0) + amount * 4);
                    break;
            }
        }
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–∞–Ω–æ–≤—ã–µ —Å–ª–∏—Ç–∫–∏ –∏ –æ–±–µ–¥–Ω—ë–Ω–Ω—ã–π —É—Ä–∞–Ω
        if (totalOres >= 8) {
            outputMaterials.put(Material.PRISMARINE_SHARD, Math.max(1, totalOres / 8)); // –£—Ä–∞–Ω–æ–≤—ã–µ —Å–ª–∏—Ç–∫–∏
        }
        if (totalOres >= 16) {
            outputMaterials.put(Material.CLAY_BALL, Math.max(1, totalOres / 16)); // –û–±–µ–¥–Ω—ë–Ω–Ω—ã–π —É—Ä–∞–Ω
        }
        
        // –®–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å
            outputMaterials.put(Material.PRISMARINE_CRYSTALS, 1); // –û–±–æ–≥–∞—â—ë–Ω–Ω—ã–π —É—Ä–∞–Ω
        }
        if (Math.random() < 0.05) { // 5% —à–∞–Ω—Å
            outputMaterials.put(Material.END_CRYSTAL, 1); // –£—Ä–∞–Ω–æ–≤–∞—è –∫–∞–ø—Å—É–ª–∞
        }
    }
    
    private void startProcessingEffects() {
        effectsTask = new BukkitRunnable() {
            int ticks = 0;
            
            @Override
            public void run() {
                if (!isProcessing) {
                    cancel();
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if (System.currentTimeMillis() - processStartTime >= processDuration) {
                    cancel();
                    return;
                }
                
                World world = location.getWorld();
                if (world == null) {
                    cancel();
                    return;
                }
                
                // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                try {
                    // –í—Ä–∞—â–∞—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã - —É–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    if (ticks % 2 == 0) { // –ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Ç–∏–∫
                        double angle = ticks * 0.3;
                        for (int i = 0; i < 4; i++) { // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 8 –¥–æ 4
                            double particleAngle = angle + i * (Math.PI / 2);
                            double x = Math.cos(particleAngle) * 1.5;
                            double z = Math.sin(particleAngle) * 1.5;
                            Location particleLoc = location.clone().add(x, 1 + Math.sin(ticks * 0.1) * 0.3, z);
                            
                            world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 0,
                                new Particle.DustOptions(org.bukkit.Color.YELLOW, 0.8f));
                        }
                    }
                    
                    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–± —ç–Ω–µ—Ä–≥–∏–∏ - —Ä–µ–∂–µ
                    if (ticks % 5 == 0) {
                        world.spawnParticle(Particle.END_ROD, 
                            location.clone().add(0, 1.5, 0), 1, 0.1, 0.1, 0.1, 0.02);
                    }
                    
                    // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä—è–¥—ã - —Ä–µ–∂–µ
                    if (ticks % 40 == 0) {
                        world.spawnParticle(Particle.ELECTRIC_SPARK, 
                            location.clone().add(0, 1, 0), 4, 1, 1, 1, 0.1);
                    }
                    
                    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã - —Ä–µ–∂–µ
                    if (ticks % 80 == 0) {
                        world.playSound(location, Sound.BLOCK_BEACON_AMBIENT, 0.2f, 1.5f);
                    }
                    
                    // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã - —Ä–µ–∂–µ
                    if (ticks % 120 == 0) {
                        // –ö–æ–ª—å—Ü–æ —á–∞—Å—Ç–∏—Ü - —É–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        for (int deg = 0; deg < 360; deg += 30) {
                            double radians = Math.toRadians(deg);
                            double x = Math.cos(radians) * 2;
                            double z = Math.sin(radians) * 2;
                            world.spawnParticle(Particle.ENCHANTMENT_TABLE,
                                location.clone().add(x, 1, z), 1, 0, 0, 0, 0.1);
                        }
                    }
                } catch (Exception e) {
                    plugin.getLogger().warning("–û—à–∏–±–∫–∞ –≤ —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏: " + e.getMessage());
                }
                
                ticks++;
            }
        }.runTaskTimer(plugin, 0L, 4L); // –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å 2L –¥–æ 4L
    }
    
    private void completeProcess() {
        isProcessing = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (effectsTask != null) {
            effectsTask.cancel();
            effectsTask = null;
        }
        
        World world = location.getWorld();
        if (world != null) {
            // –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            world.spawnParticle(Particle.EXPLOSION_LARGE, location.clone().add(0, 1, 0), 1);
            world.spawnParticle(Particle.FIREWORKS_SPARK, location.clone().add(0, 1.5, 0), 15, 1, 1, 1, 0.2);
            world.spawnParticle(Particle.TOTEM, location.clone().add(0, 1, 0), 10, 0.8, 0.8, 0.8, 0.1);
            
            world.playSound(location, Sound.UI_TOAST_CHALLENGE_COMPLETE, 1.0f, 1.2f);
            world.playSound(location, Sound.ENTITY_PLAYER_LEVELUP, 0.8f, 1.5f);
        }
        
        // –í—ã–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫—É
        Player owner = Bukkit.getPlayer(ownerId);
        if (owner != null && owner.isOnline()) {
            owner.sendMessage(ChatColor.GREEN + "‚úÖ –¶–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
            owner.sendMessage(ChatColor.YELLOW + "üéÅ –ü–æ–ª—É—á–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã:");
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            for (Map.Entry<Material, Integer> entry : outputMaterials.entrySet()) {
                ItemStack result = createResultItem(entry.getKey(), entry.getValue());
                String displayName = getResultDisplayName(entry.getKey());
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                Map<Integer, ItemStack> leftover = owner.getInventory().addItem(result);
                if (!leftover.isEmpty()) {
                    // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –∑–µ–º–ª—é
                    for (ItemStack item : leftover.values()) {
                        world.dropItemNaturally(owner.getLocation(), item);
                    }
                    owner.sendMessage(ChatColor.YELLOW + "‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–µ–º–ª—é - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!");
                }
                
                owner.sendMessage(ChatColor.GRAY + "  ‚Ä¢ " + ChatColor.WHITE + displayName + 
                    ChatColor.GRAY + " x" + entry.getValue());
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏–∞—Ü–∏—é –∏–≥—Ä–æ–∫—É
            plugin.getRadiationManager().addRadiation(owner, 15);
            owner.sendMessage(ChatColor.RED + "‚ò¢Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ —Ä–∞–¥–∏–∞—Ü–∏—è: +15");
            owner.sendMessage(ChatColor.YELLOW + "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —É—Ä–∞–Ω–æ–º!");
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            plugin.getPlayerStats(owner.getUniqueId()).incrementCentrifugeUses();
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        inputMaterials.clear();
        outputMaterials.clear();
    }

    private ItemStack createResultItem(Material material, int amount) {
        ItemStack result;

        // –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        switch (material) {
            case GUNPOWDER:
                result = UraniumItems.createUraniumDust();
                result.setAmount(amount);
                break;
            case PRISMARINE_SHARD:
                result = UraniumItems.createUraniumIngot(amount);
                break;
            case END_CRYSTAL:
                result = UraniumItems.getItem("uranium_capsule");
                result.setAmount(amount);
                break;
            default:
                result = new ItemStack(material, amount);
                break;
        }

        return result;
    }

    private String getResultDisplayName(Material material) {
        switch (material) {
            case GUNPOWDER: return "–£—Ä–∞–Ω–æ–≤–∞—è –ø—ã–ª—å";
            case PRISMARINE_SHARD: return "–£—Ä–∞–Ω–æ–≤—ã–µ —Å–ª–∏—Ç–∫–∏";
            case END_CRYSTAL: return "–£—Ä–∞–Ω–æ–≤–∞—è –∫–∞–ø—Å—É–ª–∞";
            default: return getMaterialDisplayName(material);
        }
    }
    
    public void stopCentrifuge() {
        if (processingTask != null) {
            processingTask.cancel();
        }
        if (effectsTask != null) {
            effectsTask.cancel();
        }
        isProcessing = false;
    }
    
    public double getProgress() {
        if (!isProcessing) {
            return 0.0;
        }
        
        long elapsed = System.currentTimeMillis() - processStartTime;
        return Math.min(100.0, (double) elapsed / processDuration * 100.0);
    }
    
    public long getRemainingTime() {
        if (!isProcessing) {
            return 0;
        }
        
        long elapsed = System.currentTimeMillis() - processStartTime;
        return Math.max(0, processDuration - elapsed);
    }
    
    public String getRemainingTimeString() {
        long remaining = getRemainingTime();
        if (remaining <= 0) {
            return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ";
        }
        
        long seconds = remaining / 1000;
        long minutes = seconds / 60;
        seconds = seconds % 60;
        
        return String.format("%d:%02d", minutes, seconds);
    }
    
    private String formatMaterials(Map<Material, Integer> materials) {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        
        for (Map.Entry<Material, Integer> entry : materials.entrySet()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append(getMaterialDisplayName(entry.getKey())).append(" x").append(entry.getValue());
            first = false;
        }
        
        return sb.toString();
    }
    
    private String getMaterialDisplayName(Material material) {
        switch (material) {
            case IRON_ORE: return "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_IRON_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è –∂–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞";
            case GOLD_ORE: return "–ó–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_GOLD_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è –∑–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞";
            case COPPER_ORE: return "–ú–µ–¥–Ω–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_COPPER_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è –º–µ–¥–Ω–∞—è —Ä—É–¥–∞";
            case COAL_ORE: return "–£–≥–æ–ª—å–Ω–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_COAL_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è —É–≥–æ–ª—å–Ω–∞—è —Ä—É–¥–∞";
            case REDSTONE_ORE: return "–†—É–¥–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞–º–Ω—è";
            case DEEPSLATE_REDSTONE_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è —Ä—É–¥–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞–º–Ω—è";
            case LAPIS_ORE: return "–õ–∞–∑—É—Ä–∏—Ç–æ–≤–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_LAPIS_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è –ª–∞–∑—É—Ä–∏—Ç–æ–≤–∞—è —Ä—É–¥–∞";
            case DIAMOND_ORE: return "–ê–ª–º–∞–∑–Ω–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_DIAMOND_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è –∞–ª–º–∞–∑–Ω–∞—è —Ä—É–¥–∞";
            case EMERALD_ORE: return "–ò–∑—É–º—Ä—É–¥–Ω–∞—è —Ä—É–¥–∞";
            case DEEPSLATE_EMERALD_ORE: return "–ì–ª—É–±–∏–Ω–Ω–∞—è –∏–∑—É–º—Ä—É–¥–Ω–∞—è —Ä—É–¥–∞";
            case NETHER_QUARTZ_ORE: return "–ö–≤–∞—Ä—Ü–µ–≤–∞—è —Ä—É–¥–∞";
            case NETHER_GOLD_ORE: return "–ê–¥—Å–∫–∞—è –∑–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞";
            case ANCIENT_DEBRIS: return "–î—Ä–µ–≤–Ω–∏–µ –æ–±–ª–æ–º–∫–∏";
            case IRON_INGOT: return "–ñ–µ–ª–µ–∑–Ω—ã–µ —Å–ª–∏—Ç–∫–∏";
            case GOLD_INGOT: return "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏";
            case COPPER_INGOT: return "–ú–µ–¥–Ω—ã–µ —Å–ª–∏—Ç–∫–∏";
            case COAL: return "–£–≥–æ–ª—å";
            case REDSTONE: return "–ö—Ä–∞—Å–Ω–∞—è –ø—ã–ª—å";
            case LAPIS_LAZULI: return "–õ–∞–∑—É—Ä–∏—Ç";
            case DIAMOND: return "–ê–ª–º–∞–∑—ã";
            case EMERALD: return "–ò–∑—É–º—Ä—É–¥—ã";
            case QUARTZ: return "–ö–≤–∞—Ä—Ü";
            default: return material.name().toLowerCase().replace("_", " ");
        }
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    public UUID getOwner() { return ownerId; }
    public Location getLocation() { return location; }
    public boolean isProcessing() { return isProcessing; }
    public int getProcessCount() { return processCount; }
    public Map<Material, Integer> getInputMaterials() { return new HashMap<>(inputMaterials); }
    public Map<Material, Integer> getOutputMaterials() { return new HashMap<>(outputMaterials); }
}
