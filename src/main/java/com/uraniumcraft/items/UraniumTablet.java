package com.uraniumcraft.items;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;
import net.kyori.adventure.text.format.TextColor;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.Plugin;

import java.util.*;

public class UraniumTablet {
    
    public enum TabletType {
        STANDARD("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Ä–∞–Ω–æ–≤—ã–π –ø–ª–∞–Ω—à–µ—Ç", Material.RECOVERY_COMPASS, 2000, NamedTextColor.GREEN),
        ADVANCED("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–∞–Ω–æ–≤—ã–π –ø–ª–∞–Ω—à–µ—Ç", Material.ECHO_SHARD, 5000, NamedTextColor.BLUE),
        QUANTUM("–ö–≤–∞–Ω—Ç–æ–≤—ã–π —É—Ä–∞–Ω–æ–≤—ã–π –ø–ª–∞–Ω—à–µ—Ç", Material.NETHERITE_UPGRADE_SMITHING_TEMPLATE, 10000, NamedTextColor.DARK_PURPLE),
        REALITY("–ü–ª–∞–Ω—à–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", Material.NETHER_STAR, 25000, NamedTextColor.GOLD);
        
        private final String displayName;
        private final Material material;
        private final int maxEnergy;
        private final NamedTextColor color;
        
        TabletType(String displayName, Material material, int maxEnergy, NamedTextColor color) {
            this.displayName = displayName;
            this.material = material;
            this.maxEnergy = maxEnergy;
            this.color = color;
        }
        
        public String getDisplayName() { return displayName; }
        public Material getMaterial() { return material; }
        public int getMaxEnergy() { return maxEnergy; }
        public NamedTextColor getColor() { return color; }
    }
    
    public enum TabletModule {
        RADIATION_SCANNER("–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä", "–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–¥–∏–∞—Ü–∏–∏", 50),
        QUANTUM_PROCESSOR("–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä", "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", 100),
        ENERGY_AMPLIFIER("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —É—Å–∏–ª–∏—Ç–µ–ª—å", "–£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏", 75),
        HOLOGRAPHIC_PROJECTOR("–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç–æ—Ä", "3D –ø—Ä–æ–µ–∫—Ü–∏–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", 125),
        TEMPORAL_STABILIZER("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä", "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π", 200),
        MATTER_SYNTHESIZER("–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∏", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —ç–Ω–µ—Ä–≥–∏–∏", 300),
        DIMENSIONAL_GATEWAY("–ú–µ–∂–º–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç–∞–ª", "–î–æ—Å—Ç—É–ø –∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º", 500),
        REALITY_ANCHOR("–Ø–∫–æ—Ä—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", "–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞-–≤—Ä–µ–º–µ–Ω–∏", 1000);
        
        private final String name;
        private final String description;
        private final int energyCost;
        
        TabletModule(String name, String description, int energyCost) {
            this.name = name;
            this.description = description;
            this.energyCost = energyCost;
        }
        
        public String getName() { return name; }
        public String getDescription() { return description; }
        public int getEnergyCost() { return energyCost; }
    }
    
    public static ItemStack createTablet(Plugin plugin, TabletType type) {
        return createTablet(plugin, type, type.getMaxEnergy(), new HashSet<>());
    }
    
    public static ItemStack createTablet(Plugin plugin, TabletType type, int currentEnergy, Set<TabletModule> modules) {
        ItemStack tablet = new ItemStack(type.getMaterial());
        ItemMeta meta = tablet.getItemMeta();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        Component name = createTabletName(type);
        meta.displayName(name);
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        List<Component> lore = createTabletLore(type, currentEnergy, modules);
        meta.lore(lore);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω—á–∞–Ω—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        addTabletEnchantments(meta, type);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ NBT
        saveTabletData(meta, plugin, type, currentEnergy, modules);
        
        tablet.setItemMeta(meta);
        return tablet;
    }
    
    private static Component createTabletName(TabletType type) {
        String prefix = getTabletPrefix(type);
        return Component.text()
            .append(Component.text(prefix + " ", NamedTextColor.YELLOW))
            .append(Component.text(type.getDisplayName(), type.getColor(), TextDecoration.BOLD))
            .append(Component.text(" " + prefix, NamedTextColor.YELLOW))
            .decoration(TextDecoration.ITALIC, false)
            .build();
    }
    
    private static String getTabletPrefix(TabletType type) {
        switch (type) {
            case STANDARD: return "‚ö°";
            case ADVANCED: return "üåü";
            case QUANTUM: return "‚öõÔ∏è";
            case REALITY: return "üåå";
            default: return "üì±";
        }
    }
    
    private static List<Component> createTabletLore(TabletType type, int currentEnergy, Set<TabletModule> modules) {
        List<Component> lore = new ArrayList<>();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        lore.add(Component.text("‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", NamedTextColor.DARK_GRAY));
        lore.add(Component.empty());
        
        // –≠–Ω–µ—Ä–≥–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        double energyPercent = (double) currentEnergy / type.getMaxEnergy() * 100;
        String energyBar = createEnergyBar(energyPercent);
        NamedTextColor energyColor = getEnergyColor(energyPercent);
        
        lore.add(Component.text("üîã –≠–Ω–µ—Ä–≥–∏—è:", NamedTextColor.GRAY)
            .append(Component.text(" " + energyBar, energyColor))
            .append(Component.text(" " + String.format("%.1f%%", energyPercent), NamedTextColor.WHITE)));
        lore.add(Component.text("   " + currentEnergy + " / " + type.getMaxEnergy() + " –µ–¥–∏–Ω–∏—Ü", NamedTextColor.GRAY));
        lore.add(Component.empty());
        
        // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        lore.add(Component.text("üì± –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", NamedTextColor.GOLD, TextDecoration.BOLD));
        lore.add(Component.text("  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–º–∏", NamedTextColor.AQUA));
        lore.add(Component.text("  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–¥–∏–∞—Ü–∏–∏", NamedTextColor.YELLOW));
        lore.add(Component.text("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏", NamedTextColor.LIGHT_PURPLE));
        lore.add(Component.text("  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", NamedTextColor.GREEN));
        
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (type.ordinal() >= TabletType.ADVANCED.ordinal()) {
            lore.add(Component.empty());
            lore.add(Component.text("üåü –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", NamedTextColor.BLUE, TextDecoration.BOLD));
            lore.add(Component.text("  ‚Ä¢ –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è", NamedTextColor.DARK_PURPLE));
            lore.add(Component.text("  ‚Ä¢ –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ü–∏–∏", NamedTextColor.BLUE));
            lore.add(Component.text("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", NamedTextColor.CYAN));
        }
        
        // –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (type.ordinal() >= TabletType.QUANTUM.ordinal()) {
            lore.add(Component.empty());
            lore.add(Component.text("‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", NamedTextColor.DARK_PURPLE, TextDecoration.BOLD));
            lore.add(Component.text("  ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏", NamedTextColor.RED));
            lore.add(Component.text("  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∏", NamedTextColor.DARK_RED));
            lore.add(Component.text("  ‚Ä¢ –ö–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", NamedTextColor.DARK_BLUE));
        }
        
        // –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        if (type == TabletType.REALITY) {
            lore.add(Component.empty());
            lore.add(Component.text("üåå –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:", NamedTextColor.GOLD, TextDecoration.BOLD));
            lore.add(Component.text("  ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞-–≤—Ä–µ–º–µ–Ω–∏", NamedTextColor.DARK_RED));
            lore.add(Component.text("  ‚Ä¢ –ú–µ–∂–º–µ—Ä–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã", NamedTextColor.DARK_GREEN));
            lore.add(Component.text("  ‚Ä¢ –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é", NamedTextColor.DARK_PURPLE));
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        if (!modules.isEmpty()) {
            lore.add(Component.empty());
            lore.add(Component.text("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:", NamedTextColor.YELLOW, TextDecoration.BOLD));
            for (TabletModule module : modules) {
                lore.add(Component.text("  ‚Ä¢ " + module.getName(), NamedTextColor.WHITE));
                lore.add(Component.text("    " + module.getDescription(), NamedTextColor.GRAY));
            }
        }
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        lore.add(Component.empty());
        lore.add(Component.text("‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", NamedTextColor.DARK_GRAY));
        lore.add(Component.text("üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", NamedTextColor.YELLOW, TextDecoration.BOLD));
        lore.add(Component.text("  –ü–ö–ú - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", NamedTextColor.WHITE));
        lore.add(Component.text("  Shift+–ü–ö–ú - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å", NamedTextColor.WHITE));
        lore.add(Component.text("  F - –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è", NamedTextColor.WHITE));
        lore.add(Component.text("  Q - –ö–≤–∞–Ω—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", NamedTextColor.WHITE));
        lore.add(Component.empty());
        lore.add(Component.text("‚ö†Ô∏è –ü–ª–∞–Ω—à–µ—Ç –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–æ—Ç–µ—Ä–∏!", NamedTextColor.RED, TextDecoration.BOLD));
        lore.add(Component.text("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏", NamedTextColor.GREEN));
        lore.add(Component.text("‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", NamedTextColor.DARK_GRAY));
        
        return lore;
    }
    
    private static void addTabletEnchantments(ItemMeta meta, TabletType type) {
        switch (type) {
            case STANDARD:
                meta.addEnchant(Enchantment.UNBREAKING, 1, true);
                break;
            case ADVANCED:
                meta.addEnchant(Enchantment.UNBREAKING, 3, true);
                meta.addEnchant(Enchantment.MENDING, 1, true);
                break;
            case QUANTUM:
                meta.addEnchant(Enchantment.UNBREAKING, 5, true);
                meta.addEnchant(Enchantment.MENDING, 1, true);
                meta.addEnchant(Enchantment.EFFICIENCY, 5, true);
                break;
            case REALITY:
                meta.addEnchant(Enchantment.UNBREAKING, 10, true);
                meta.addEnchant(Enchantment.MENDING, 1, true);
                meta.addEnchant(Enchantment.EFFICIENCY, 10, true);
                meta.addEnchant(Enchantment.FORTUNE, 5, true);
                break;
        }
        
        meta.addItemFlags(ItemFlag.HIDE_ENCHANTS, ItemFlag.HIDE_ATTRIBUTES);
        meta.setUnbreakable(true);
    }
    
    private static void saveTabletData(ItemMeta meta, Plugin plugin, TabletType type, int energy, Set<TabletModule> modules) {
        NamespacedKey typeKey = new NamespacedKey(plugin, "tablet_type");
        NamespacedKey energyKey = new NamespacedKey(plugin, "tablet_energy");
        NamespacedKey maxEnergyKey = new NamespacedKey(plugin, "tablet_max_energy");
        NamespacedKey modulesKey = new NamespacedKey(plugin, "tablet_modules");
        NamespacedKey versionKey = new NamespacedKey(plugin, "tablet_version");
        
        meta.getPersistentDataContainer().set(typeKey, PersistentDataType.STRING, type.name());
        meta.getPersistentDataContainer().set(energyKey, PersistentDataType.INTEGER, energy);
        meta.getPersistentDataContainer().set(maxEnergyKey, PersistentDataType.INTEGER, type.getMaxEnergy());
        meta.getPersistentDataContainer().set(versionKey, PersistentDataType.STRING, "2.0");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        if (!modules.isEmpty()) {
            StringBuilder moduleString = new StringBuilder();
            for (TabletModule module : modules) {
                if (moduleString.length() > 0) moduleString.append(",");
                moduleString.append(module.name());
            }
            meta.getPersistentDataContainer().set(modulesKey, PersistentDataType.STRING, moduleString.toString());
        }
    }
    
    private static String createEnergyBar(double percent) {
        int bars = (int) (percent / 5); // 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        StringBuilder bar = new StringBuilder();
        
        for (int i = 0; i < 20; i++) {
            if (i < bars) {
                if (percent > 80) bar.append("‚ñà");
                else if (percent > 60) bar.append("‚ñâ");
                else if (percent > 40) bar.append("‚ñä");
                else if (percent > 20) bar.append("‚ñã");
                else bar.append("‚ñå");
            } else {
                bar.append("‚ñë");
            }
        }
        
        return bar.toString();
    }
    
    private static NamedTextColor getEnergyColor(double percent) {
        if (percent > 80) return NamedTextColor.GREEN;
        if (percent > 60) return NamedTextColor.YELLOW;
        if (percent > 40) return NamedTextColor.GOLD;
        if (percent > 20) return NamedTextColor.RED;
        return NamedTextColor.DARK_RED;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω—à–µ—Ç–æ–º
    public static TabletType getTabletType(ItemStack item, Plugin plugin) {
        if (item == null || !item.hasItemMeta()) return null;
        
        NamespacedKey typeKey = new NamespacedKey(plugin, "tablet_type");
        String typeString = item.getItemMeta().getPersistentDataContainer().get(typeKey, PersistentDataType.STRING);
        
        if (typeString != null) {
            try {
                return TabletType.valueOf(typeString);
            } catch (IllegalArgumentException e) {
                return null;
            }
        }
        
        return null;
    }
    
    public static int getTabletEnergy(ItemStack item, Plugin plugin) {
        if (item == null || !item.hasItemMeta()) return 0;
        
        NamespacedKey energyKey = new NamespacedKey(plugin, "tablet_energy");
        return item.getItemMeta().getPersistentDataContainer().getOrDefault(energyKey, PersistentDataType.INTEGER, 0);
    }
    
    public static void setTabletEnergy(ItemStack item, Plugin plugin, int energy) {
        if (item == null || !item.hasItemMeta()) return;
        
        TabletType type = getTabletType(item, plugin);
        if (type == null) return;
        
        ItemMeta meta = item.getItemMeta();
        NamespacedKey energyKey = new NamespacedKey(plugin, "tablet_energy");
        
        energy = Math.max(0, Math.min(energy, type.getMaxEnergy()));
        meta.getPersistentDataContainer().set(energyKey, PersistentDataType.INTEGER, energy);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        Set<TabletModule> modules = getTabletModules(item, plugin);
        List<Component> lore = createTabletLore(type, energy, modules);
        meta.lore(lore);
        
        item.setItemMeta(meta);
    }
    
    public static boolean consumeEnergy(ItemStack item, Plugin plugin, int amount) {
        int currentEnergy = getTabletEnergy(item, plugin);
        if (currentEnergy < amount) {
            return false;
        }
        
        setTabletEnergy(item, plugin, currentEnergy - amount);
        return true;
    }
    
    public static Set<TabletModule> getTabletModules(ItemStack item, Plugin plugin) {
        if (item == null || !item.hasItemMeta()) return new HashSet<>();
        
        NamespacedKey modulesKey = new NamespacedKey(plugin, "tablet_modules");
        String modulesString = item.getItemMeta().getPersistentDataContainer().get(modulesKey, PersistentDataType.STRING);
        
        Set<TabletModule> modules = new HashSet<>();
        if (modulesString != null && !modulesString.isEmpty()) {
            String[] moduleNames = modulesString.split(",");
            for (String moduleName : moduleNames) {
                try {
                    modules.add(TabletModule.valueOf(moduleName));
                } catch (IllegalArgumentException ignored) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
                }
            }
        }
        
        return modules;
    }
    
    public static void addTabletModule(ItemStack item, Plugin plugin, TabletModule module) {
        Set<TabletModule> modules = getTabletModules(item, plugin);
        modules.add(module);
        
        TabletType type = getTabletType(item, plugin);
        int energy = getTabletEnergy(item, plugin);
        
        ItemStack newTablet = createTablet(plugin, type, energy, modules);
        item.setItemMeta(newTablet.getItemMeta());
    }
    
    public static boolean hasTabletModule(ItemStack item, Plugin plugin, TabletModule module) {
        return getTabletModules(item, plugin).contains(module);
    }
    
    public static boolean isUraniumTablet(ItemStack item, Plugin plugin) {
        return getTabletType(item, plugin) != null;
    }
    
    public static int getEnergyRegenRate(TabletType type, Set<TabletModule> modules) {
        int baseRegen = switch (type) {
            case STANDARD -> 10;
            case ADVANCED -> 20;
            case QUANTUM -> 35;
            case REALITY -> 50;
        };
        
        // –ë–æ–Ω—É—Å –æ—Ç –º–æ–¥—É–ª–µ–π
        if (modules.contains(TabletModule.ENERGY_AMPLIFIER)) {
            baseRegen = (int) (baseRegen * 1.5);
        }
        
        if (modules.contains(TabletModule.QUANTUM_PROCESSOR)) {
            baseRegen = (int) (baseRegen * 1.25);
        }
        
        return baseRegen;
    }
    
    public static boolean canUseFunction(ItemStack item, Plugin plugin, String functionName) {
        TabletType type = getTabletType(item, plugin);
        if (type == null) return false;
        
        Set<TabletModule> modules = getTabletModules(item, plugin);
        
        switch (functionName.toLowerCase()) {
            case "quantum_teleportation":
                return type.ordinal() >= TabletType.ADVANCED.ordinal();
            case "holographic_projection":
                return type.ordinal() >= TabletType.ADVANCED.ordinal() || 
                       modules.contains(TabletModule.HOLOGRAPHIC_PROJECTOR);
            case "time_anomaly":
                return type.ordinal() >= TabletType.QUANTUM.ordinal() || 
                       modules.contains(TabletModule.TEMPORAL_STABILIZER);
            case "matter_synthesis":
                return type.ordinal() >= TabletType.QUANTUM.ordinal() || 
                       modules.contains(TabletModule.MATTER_SYNTHESIZER);
            case "dimensional_portal":
                return type == TabletType.REALITY || 
                       modules.contains(TabletModule.DIMENSIONAL_GATEWAY);
            case "reality_manipulation":
                return type == TabletType.REALITY || 
                       modules.contains(TabletModule.REALITY_ANCHOR);
            default:
                return true; // –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
        }
    }
}
