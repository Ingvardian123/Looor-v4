package com.uraniumcraft.listeners;

import com.uraniumcraft.UraniumPlugin;
import com.uraniumcraft.gui.LaboratoryGUI;
import com.uraniumcraft.items.UraniumItems;
import com.uraniumcraft.laboratory.LaboratoryManager;
import com.uraniumcraft.laboratory.LaboratoryTerminal;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

public class LaboratoryListener implements Listener {
    private final UraniumPlugin plugin;
    private final LaboratoryManager laboratoryManager;
    
    public LaboratoryListener(UraniumPlugin plugin, LaboratoryManager laboratoryManager) {
        this.plugin = plugin;
        this.laboratoryManager = laboratoryManager;
    }
    
    @EventHandler
    public void onBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        ItemStack item = event.getItemInHand();
        
        if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {
            String displayName = item.getItemMeta().getDisplayName();
            
            if (displayName.equals(ChatColor.LIGHT_PURPLE + "–¢–µ—Ä–º–∏–Ω–∞–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")) {
                boolean created = laboratoryManager.createTerminal(event.getBlock().getLocation(), player);
                if (created) {
                    player.sendMessage(ChatColor.GREEN + "‚úì –¢–µ—Ä–º–∏–Ω–∞–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω!");
                    player.sendMessage(ChatColor.AQUA + "–ü—Ä–∏–Ω–µ—Å–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:");
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ –ñ–µ–ª–µ–∑–Ω—ã–µ –±–ª–æ–∫–∏ x16");
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ –†–µ–¥—Å—Ç–æ—É–Ω –±–ª–æ–∫–∏ x8");
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ –ê–ª–º–∞–∑—ã x4");
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ –ò–∑—É–º—Ä—É–¥—ã x2");
                    player.playSound(player.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 1.0f, 1.0f);
                    
                    // –≠—Ñ—Ñ–µ–∫—Ç—ã
                    event.getBlock().getWorld().spawnParticle(Particle.ENCHANTMENT_TABLE, 
                        event.getBlock().getLocation().add(0.5, 1, 0.5), 20, 0.5, 0.5, 0.5, 0.1);
                } else {
                    event.setCancelled(true);
                    player.sendMessage(ChatColor.RED + "–ó–¥–µ—Å—å —É–∂–µ –µ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª!");
                }
            }
        }
    }
    
    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        if (event.getClickedBlock() == null) return;
        
        Block block = event.getClickedBlock();
        LaboratoryTerminal terminal = laboratoryManager.getTerminal(block.getLocation());
        
        if (terminal != null) {
            Player player = event.getPlayer();
            
            if (!terminal.getOwner().equals(player.getUniqueId())) {
                player.sendMessage(ChatColor.RED + "–≠—Ç–æ –Ω–µ –≤–∞—à —Ç–µ—Ä–º–∏–Ω–∞–ª!");
                player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);
                return;
            }
            
            if (terminal.isActive()) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º GUI —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                LaboratoryGUI.openMainMenu(player, terminal);
                player.playSound(player.getLocation(), Sound.BLOCK_BEACON_AMBIENT, 1.0f, 1.0f);
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω—É–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                ItemStack handItem = player.getInventory().getItemInMainHand();
                if (handItem != null && handItem.getType() != Material.AIR) {
                    Material material = handItem.getType();
                    int amount = handItem.getAmount();
                    
                    if (terminal.addMaterial(material, amount)) {
                        player.getInventory().setItemInMainHand(null);
                        player.sendMessage(ChatColor.GREEN + "‚úì –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!");
                        player.sendMessage(ChatColor.YELLOW + "–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: " + 
                                         terminal.getActivationProgress() + "%");
                        
                        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                        player.playSound(player.getLocation(), Sound.BLOCK_ANVIL_USE, 1.0f, 1.5f);
                        
                        // –ß–∞—Å—Ç–∏—Ü—ã
                        block.getWorld().spawnParticle(Particle.CRIT, 
                            block.getLocation().add(0.5, 1, 0.5), 10, 0.3, 0.3, 0.3, 0.1);
                        
                        if (terminal.isActive()) {
                            player.sendMessage(ChatColor.GOLD + "üéâ –¢–µ—Ä–º–∏–Ω–∞–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
                            player.sendMessage(ChatColor.AQUA + "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!");
                            player.playSound(player.getLocation(), Sound.UI_TOAST_CHALLENGE_COMPLETE, 1.0f, 1.0f);
                            
                            // –≠—Ñ—Ñ–µ–∫—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                            block.getWorld().spawnParticle(Particle.FIREWORKS_SPARK, 
                                block.getLocation().add(0.5, 2, 0.5), 50, 1, 1, 1, 0.2);
                        }
                    } else {
                        player.sendMessage(ChatColor.GRAY + "–≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.");
                    }
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    showTerminalStatus(player, terminal);
                }
            }
            
            event.setCancelled(true);
        }
    }
    
    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        
        Player player = (Player) event.getWhoClicked();
        String title = event.getView().getTitle();
        
        if (!title.equals(ChatColor.DARK_PURPLE + "–¢–µ—Ä–º–∏–Ω–∞–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")) return;
        
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || clicked.getType() == Material.AIR) return;
        
        String displayName = clicked.getItemMeta().getDisplayName();
        
        if (displayName.startsWith(ChatColor.GREEN + "–ù–∞—á–∞—Ç—å: ")) {
            String researchName = displayName.replace(ChatColor.GREEN + "–ù–∞—á–∞—Ç—å: ", "");
            String researchType = getResearchTypeByName(researchName);
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Ä–º–∏–Ω–∞–ª –∏–≥—Ä–æ–∫–∞
            LaboratoryTerminal terminal = findPlayerTerminal(player);
            if (terminal != null && terminal.startResearch(researchType)) {
                player.sendMessage(ChatColor.GREEN + "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '" + researchName + "' –Ω–∞—á–∞—Ç–æ!");
                player.closeInventory();
                player.playSound(player.getLocation(), Sound.BLOCK_ENCHANTMENT_TABLE_USE, 1.0f, 1.2f);
            } else {
                player.sendMessage(ChatColor.RED + "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!");
            }
        }
    }
    
    private void showTerminalStatus(Player player, LaboratoryTerminal terminal) {
        player.sendMessage(ChatColor.AQUA + "üî¨ –°—Ç–∞—Ç—É—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:");
        player.sendMessage(ChatColor.WHITE + "–ê–∫—Ç–∏–≤–∞—Ü–∏—è: " + terminal.getActivationProgress() + "%");
        
        if (!terminal.isActive()) {
            player.sendMessage(ChatColor.YELLOW + "üì¶ –ï—â—ë –Ω—É–∂–Ω–æ:");
            for (Material material : terminal.getRequiredMaterials().keySet()) {
                int required = terminal.getRequiredMaterials().get(material);
                if (required > 0) {
                    String materialName = getMaterialDisplayName(material);
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ " + materialName + ": " + 
                                     ChatColor.YELLOW + required);
                }
            }
        }
    }
    
    private String getMaterialDisplayName(Material material) {
        switch (material) {
            case IRON_BLOCK: return ChatColor.GRAY + "–ñ–µ–ª–µ–∑–Ω—ã–µ –±–ª–æ–∫–∏";
            case REDSTONE_BLOCK: return ChatColor.RED + "–†–µ–¥—Å—Ç–æ—É–Ω –±–ª–æ–∫–∏";
            case DIAMOND: return ChatColor.AQUA + "–ê–ª–º–∞–∑—ã";
            case EMERALD: return ChatColor.GREEN + "–ò–∑—É–º—Ä—É–¥—ã";
            default: return material.name();
        }
    }
    
    private String getResearchTypeByName(String researchName) {
        switch (researchName) {
            case "–®–ª–µ–º —Ö–∏–º–∑–∞—â–∏—Ç—ã": return "hazmat_helmet";
            case "–ö–æ—Å—Ç—é–º —Ö–∏–º–∑–∞—â–∏—Ç—ã": return "hazmat_suit";
            case "–®–ª–µ–º —Å–∏–ª–æ–≤–æ–π –±—Ä–æ–Ω–∏": return "power_armor_helmet";
            case "–ù–∞–≥—Ä—É–¥–Ω–∏–∫ —Å–∏–ª–æ–≤–æ–π –±—Ä–æ–Ω–∏": return "power_armor_chestplate";
            case "–ü–æ–Ω–æ–∂–∏ —Å–∏–ª–æ–≤–æ–π –±—Ä–æ–Ω–∏": return "power_armor_leggings";
            case "–ë–æ—Ç–∏–Ω–∫–∏ —Å–∏–ª–æ–≤–æ–π –±—Ä–æ–Ω–∏": return "power_armor_boots";
            case "–†–µ–ª—å—Å–æ—Ç—Ä–æ–Ω": return "railgun";
            case "–£—Ä–∞–Ω–æ–≤—ã–π –ø–ª–∞–Ω—à–µ—Ç": return "uranium_tablet";
            case "–Ø–¥—Ä–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞": return "teleporter_core";
            case "–Ø–¥—Ä–æ —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏": return "centrifuge_core";
            default: return researchName.toLowerCase();
        }
    }
    
    private LaboratoryTerminal findPlayerTerminal(Player player) {
        return laboratoryManager.getPlayerTerminals(player.getUniqueId())
            .stream()
            .findFirst()
            .orElse(null);
    }
}
