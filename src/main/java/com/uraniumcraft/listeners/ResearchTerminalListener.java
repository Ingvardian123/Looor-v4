package com.uraniumcraft.listeners;

import com.uraniumcraft.UraniumPlugin;
import com.uraniumcraft.gui.ResearchTerminalGUI;
import com.uraniumcraft.laboratory.EnhancedLaboratory;
import com.uraniumcraft.laboratory.EnhancedLaboratoryManager;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.Map;

public class ResearchTerminalListener implements Listener {
    private final UraniumPlugin plugin;
    private final EnhancedLaboratoryManager laboratoryManager;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    private final Map<String, Map<Material, Integer>> pendingResearchMaterials = new HashMap<>();
    
    public ResearchTerminalListener(UraniumPlugin plugin, EnhancedLaboratoryManager laboratoryManager) {
        this.plugin = plugin;
        this.laboratoryManager = laboratoryManager;
    }
    
    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        
        Player player = (Player) event.getWhoClicked();
        String title = event.getView().getTitle();
        
        if (title.equals(ChatColor.DARK_BLUE + "üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª")) {
            handleMainTerminalClick(player, event);
        } else if (title.startsWith(ChatColor.DARK_PURPLE + "üìÅ ")) {
            handleCategoryClick(player, event);
        } else if (title.startsWith(ChatColor.DARK_GREEN + "üî¨ ")) {
            handleResearchDetailsClick(player, event);
        }
    }
    
    @EventHandler
    public void onInventoryClose(InventoryCloseEvent event) {
        if (!(event.getPlayer() instanceof Player)) return;
        
        Player player = (Player) event.getPlayer();
        String title = event.getView().getTitle();
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        if (title.startsWith(ChatColor.DARK_GREEN + "üî¨ ")) {
            String playerKey = player.getUniqueId().toString();
            if (pendingResearchMaterials.containsKey(playerKey)) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–≥—Ä–æ–∫—É
                Map<Material, Integer> materials = pendingResearchMaterials.get(playerKey);
                for (Map.Entry<Material, Integer> entry : materials.entrySet()) {
                    ItemStack item = new ItemStack(entry.getKey(), entry.getValue());
                    player.getInventory().addItem(item);
                }
                pendingResearchMaterials.remove(playerKey);
                
                player.sendMessage(ChatColor.YELLOW + "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.");
            }
        }
    }
    
    private void handleMainTerminalClick(Player player, InventoryClickEvent event) {
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || clicked.getType() == Material.AIR) return;
        
        String displayName = clicked.getItemMeta().getDisplayName();
        
        var playerLabs = laboratoryManager.getPlayerLaboratories(player.getUniqueId());
        if (playerLabs.isEmpty()) return;
        
        EnhancedLaboratory laboratory = playerLabs.get(0);
        
        if (displayName.equals(ChatColor.AQUA + "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")) {
            ResearchTerminalGUI.openMainTerminal(player, laboratory);
            player.sendMessage(ChatColor.GREEN + "–î–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
            
        } else if (displayName.equals(ChatColor.GOLD + "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
            player.sendMessage(ChatColor.YELLOW + "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
            
        } else if (displayName.startsWith(ChatColor.GREEN + "üìÅ ") || 
                   displayName.startsWith(ChatColor.RED + "üìÅ ") ||
                   displayName.startsWith(ChatColor.LIGHT_PURPLE + "üìÅ ") ||
                   displayName.startsWith(ChatColor.BLUE + "üìÅ ") ||
                   displayName.startsWith(ChatColor.GOLD + "üìÅ ")) {
            
            String category = extractCategoryFromDisplayName(displayName);
            ResearchTerminalGUI.openResearchCategory(player, laboratory, category);
            
        } else if (displayName.startsWith(ChatColor.GOLD + "üîÑ ")) {
            // –ö–ª–∏–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            String researchName = displayName.substring(4); // –£–±–∏—Ä–∞–µ–º "üîÑ "
            showActiveResearchDetails(player, laboratory, researchName);
        }
        
        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.5f, 1.2f);
    }
    
    private void handleCategoryClick(Player player, InventoryClickEvent event) {
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || clicked.getType() == Material.AIR) return;
        
        String displayName = clicked.getItemMeta().getDisplayName();
        
        var playerLabs = laboratoryManager.getPlayerLaboratories(player.getUniqueId());
        if (playerLabs.isEmpty()) return;
        
        EnhancedLaboratory laboratory = playerLabs.get(0);
        
        if (displayName.equals(ChatColor.YELLOW + "‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")) {
            ResearchTerminalGUI.openMainTerminal(player, laboratory);
            
        } else if (displayName.startsWith(ChatColor.GREEN + "‚úÖ ") ||
                   displayName.startsWith(ChatColor.GOLD + "üîÑ ") ||
                   displayName.startsWith(ChatColor.YELLOW + "‚≠ê ") ||
                   displayName.startsWith(ChatColor.RED + "üîí ")) {
            
            String researchName = extractResearchNameFromDisplayName(displayName);
            String researchId = convertNameToId(researchName);
            ResearchTerminalGUI.openResearchDetails(player, laboratory, researchId);
        }
        
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.4f, 1.1f);
    }
    
    private void handleResearchDetailsClick(Player player, InventoryClickEvent event) {
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || clicked.getType() == Material.AIR) return;
        
        String displayName = clicked.getItemMeta().getDisplayName();
        
        var playerLabs = laboratoryManager.getPlayerLaboratories(player.getUniqueId());
        if (playerLabs.isEmpty()) return;
        
        EnhancedLaboratory laboratory = playerLabs.get(0);
        
        if (displayName.equals(ChatColor.YELLOW + "‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π)
            ResearchTerminalGUI.openMainTerminal(player, laboratory);
            
        } else if (displayName.equals(ChatColor.GREEN + "üöÄ –ù–ê–ß–ê–¢–¨ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï")) {
            handleStartResearch(player, event, laboratory);
            
        } else if (displayName.startsWith(ChatColor.YELLOW + "–¢—Ä–µ–±—É–µ—Ç—Å—è: ")) {
            handleMaterialSlotClick(player, event);
        }
        
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.3f, 1.0f);
    }
    
    private void handleStartResearch(Player player, InventoryClickEvent event, EnhancedLaboratory laboratory) {
        String title = event.getView().getTitle();
        String researchName = title.substring(4); // –£–±–∏—Ä–∞–µ–º "üî¨ "
        String researchId = convertNameToId(researchName);
        
        String playerKey = player.getUniqueId().toString();
        Map<Material, Integer> materials = pendingResearchMaterials.get(playerKey);
        
        if (materials == null || materials.isEmpty()) {
            player.sendMessage(ChatColor.RED + "‚ùå –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Å–ª–æ—Ç—ã!");
            player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        if (laboratory.startResearch(researchId, materials)) {
            player.sendMessage(ChatColor.GREEN + "üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '" + researchName + "' –Ω–∞—á–∞—Ç–æ!");
            player.sendMessage(ChatColor.YELLOW + "‚è±Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...");
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            pendingResearchMaterials.remove(playerKey);
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            showResearchStartEffects(player, laboratory);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º GUI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É
            new BukkitRunnable() {
                @Override
                public void run() {
                    ResearchTerminalGUI.openMainTerminal(player, laboratory);
                }
            }.runTaskLater(plugin, 10L);
            
        } else {
            player.sendMessage(ChatColor.RED + "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!");
            player.sendMessage(ChatColor.GRAY + "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.");
            player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);
        }
    }
    
    private void handleMaterialSlotClick(Player player, InventoryClickEvent event) {
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫–ª–∏–∫–∞–µ—Ç —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º –≤ —Ä—É–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        ItemStack cursor = event.getCursor();
        if (cursor != null && cursor.getType() != Material.AIR) {
            String playerKey = player.getUniqueId().toString();
            Map<Material, Integer> materials = pendingResearchMaterials.computeIfAbsent(playerKey, k -> new HashMap<>());
            
            Material material = cursor.getType();
            int amount = cursor.getAmount();
            
            materials.put(material, materials.getOrDefault(material, 0) + amount);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç
            ItemStack slotItem = new ItemStack(material, amount);
            ItemMeta meta = slotItem.getItemMeta();
            meta.setDisplayName(ChatColor.GREEN + "‚úÖ " + getMaterialDisplayName(material));
            meta.setLore(java.util.Arrays.asList(
                ChatColor.GRAY + "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + ChatColor.WHITE + amount,
                "",
                ChatColor.GREEN + "–ú–∞—Ç–µ—Ä–∏–∞–ª —Ä–∞–∑–º–µ—â—ë–Ω!"
            ));
            slotItem.setItemMeta(meta);
            event.setCurrentItem(slotItem);
            
            // –û—á–∏—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
            event.setCursor(null);
            
            player.sendMessage(ChatColor.GREEN + "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: " + getMaterialDisplayName(material) + " x" + amount);
            player.playSound(player.getLocation(), Sound.ENTITY_ITEM_PICKUP, 0.8f, 1.2f);
        }
        // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        else if (event.getCurrentItem() != null && 
                 event.getCurrentItem().getItemMeta().getDisplayName().startsWith(ChatColor.GREEN + "‚úÖ ")) {
            
            ItemStack item = event.getCurrentItem();
            Material material = item.getType();
            int amount = item.getAmount();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–≥—Ä–æ–∫—É
            player.getInventory().addItem(new ItemStack(material, amount));
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            String playerKey = player.getUniqueId().toString();
            Map<Material, Integer> materials = pendingResearchMaterials.get(playerKey);
            if (materials != null) {
                materials.remove(material);
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            ItemStack placeholder = new ItemStack(material);
            ItemMeta placeholderMeta = placeholder.getItemMeta();
            placeholderMeta.setDisplayName(ChatColor.YELLOW + "–¢—Ä–µ–±—É–µ—Ç—Å—è: " + getMaterialDisplayName(material));
            placeholderMeta.setLore(java.util.Arrays.asList(
                ChatColor.GRAY + "–ü–æ–º–µ—Å—Ç–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç"
            ));
            placeholder.setItemMeta(placeholderMeta);
            event.setCurrentItem(placeholder);
            
            player.sendMessage(ChatColor.YELLOW + "–ú–∞—Ç–µ—Ä–∏–∞–ª –≤–æ–∑–≤—Ä–∞—â—ë–Ω: " + getMaterialDisplayName(material) + " x" + amount);
            player.playSound(player.getLocation(), Sound.ENTITY_ITEM_PICKUP, 0.6f, 0.8f);
        }
    }
    
    private void showActiveResearchDetails(Player player, EnhancedLaboratory laboratory, String researchName) {
        var activeProject = laboratory.getActiveResearch().get(researchName);
        if (activeProject == null) return;
        
        player.sendMessage(ChatColor.GOLD + "üîÑ –ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: " + researchName);
        player.sendMessage(ChatColor.YELLOW + "–ü—Ä–æ–≥—Ä–µ—Å—Å: " + String.format("%.1f", activeProject.getProgress()) + "%");
        player.sendMessage(ChatColor.YELLOW + "–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: " + activeProject.getEstimatedTimeString());
        player.sendMessage(ChatColor.GRAY + "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
    }
    
    private void showResearchStartEffects(Player player, EnhancedLaboratory laboratory) {
        if (laboratory.getTerminalLocation() != null) {
            // –ß–∞—Å—Ç–∏—Ü—ã –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            laboratory.getTerminalLocation().getWorld().spawnParticle(
                Particle.ENCHANTMENT_TABLE, 
                laboratory.getTerminalLocation().clone().add(0, 2, 0), 
                30, 1, 1, 1, 0.1
            );
            
            laboratory.getTerminalLocation().getWorld().spawnParticle(
                Particle.END_ROD, 
                laboratory.getTerminalLocation().clone().add(0, 1, 0), 
                15, 0.5, 0.5, 0.5, 0.05
            );
        }
        
        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_POWER_SELECT, 1.0f, 1.5f);
        player.playSound(player.getLocation(), Sound.BLOCK_ENCHANTMENT_TABLE_USE, 0.8f, 1.2f);
        
        // –ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        new BukkitRunnable() {
            @Override
            public void run() {
                player.playSound(player.getLocation(), Sound.UI_TOAST_CHALLENGE_COMPLETE, 0.6f, 1.8f);
            }
        }.runTaskLater(plugin, 20L);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private String extractCategoryFromDisplayName(String displayName) {
        // –£–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –∏ —Å–∏–º–≤–æ–ª—ã
        return displayName.replaceAll("¬ß[0-9a-fk-or]", "").replace("üìÅ ", "").trim();
    }
    
    private String extractResearchNameFromDisplayName(String displayName) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Å—Ç–∞—Ç—É—Å–∞
        return displayName.replaceAll("¬ß[0-9a-fk-or]", "")
                         .replace("‚úÖ ", "")
                         .replace("üîÑ ", "")
                         .replace("‚≠ê ", "")
                         .replace("üîí ", "")
                         .trim();
    }
    
    private String convertNameToId(String name) {
        // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ ID
        return name.toLowerCase()
                  .replace(" ", "_")
                  .replace("—ë", "e")
                  .replace("–∞", "a")
                  .replace("–∏", "i")
                  .replace("–æ", "o")
                  .replace("—É", "u")
                  .replace("–µ", "e")
                  .replace("—ã", "y")
                  .replace("—ç", "e")
                  .replace("—é", "yu")
                  .replace("—è", "ya");
    }
    
    private String getMaterialDisplayName(Material material) {
        switch (material) {
            case IRON_INGOT: return "–ñ–µ–ª–µ–∑–Ω—ã–µ —Å–ª–∏—Ç–∫–∏";
            case REDSTONE: return "–ö—Ä–∞—Å–Ω–∞—è –ø—ã–ª—å";
            case DIAMOND: return "–ê–ª–º–∞–∑—ã";
            case EMERALD: return "–ò–∑—É–º—Ä—É–¥—ã";
            case NETHER_STAR: return "–ó–≤–µ–∑–¥–∞ –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞";
            case BEACON: return "–ú–∞—è–∫";
            case GOLD_INGOT: return "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏";
            case QUARTZ: return "–ö–≤–∞—Ä—Ü";
            case GLOWSTONE_DUST: return "–°–≤–µ—Ç–æ–ø—ã–ª—å";
            case ENDER_PEARL: return "–ñ–µ–º—á—É–≥ –ö—Ä–∞—è";
            case LEATHER: return "–ö–æ–∂–∞";
            case SUGAR: return "–°–∞—Ö–∞—Ä";
            case GOLDEN_APPLE: return "–ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ";
            case REDSTONE_BLOCK: return "–ë–ª–æ–∫ –∫—Ä–∞—Å–Ω–æ–π –ø—ã–ª–∏";
            case IRON_BLOCK: return "–ñ–µ–ª–µ–∑–Ω—ã–π –±–ª–æ–∫";
            case DIAMOND_BLOCK: return "–ê–ª–º–∞–∑–Ω—ã–π –±–ª–æ–∫";
            case OBSIDIAN: return "–û–±—Å–∏–¥–∏–∞–Ω";
            case SPYGLASS: return "–ü–æ–¥–∑–æ—Ä–Ω–∞—è —Ç—Ä—É–±–∞";
            case CONDUIT: return "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫";
            case PRISMARINE_CRYSTALS: return "–ü—Ä–∏–∑–º–∞—Ä–∏–Ω–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã";
            case NETHERITE_INGOT: return "–ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–µ —Å–ª–∏—Ç–∫–∏";
            case GLASS: return "–°—Ç–µ–∫–ª–æ";
            case GLOWSTONE: return "–°–≤–µ—Ç–æ–∫–∞–º–µ–Ω—å";
            default: return material.name().toLowerCase().replace("_", " ");
        }
    }
}
