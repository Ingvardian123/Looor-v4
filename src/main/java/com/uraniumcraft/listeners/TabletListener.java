package com.uraniumcraft.listeners;

import com.uraniumcraft.UraniumPlugin;
import com.uraniumcraft.gui.LaboratoryGUI;
import com.uraniumcraft.gui.TabletGUI;
import com.uraniumcraft.items.UraniumTablet;
import com.uraniumcraft.laboratory.LaboratoryTerminal;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;
import net.kyori.adventure.title.Title;
import org.bukkit.*;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.*;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitRunnable;

import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public class TabletListener implements Listener {
    
    private final UraniumPlugin plugin;
    private final Map<UUID, Long> lastUse = new HashMap<>();
    private final Map<UUID, Long> lastHologram = new HashMap<>();
    private final Map<UUID, Integer> hologramTasks = new HashMap<>();
    
    public TabletListener(UraniumPlugin plugin) {
        this.plugin = plugin;
        startEnergyRegenerationTask();
        startPerformanceMonitoring();
    }
    
    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerInteract(PlayerInteractEvent event) {
        Player player = event.getPlayer();
        ItemStack item = player.getInventory().getItemInMainHand();
        
        if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {
            String displayName = item.getItemMeta().getDisplayName();
            
            if (displayName.equals(ChatColor.AQUA + "‚ö° –£—Ä–∞–Ω–æ–≤—ã–π –ø–ª–∞–Ω—à–µ—Ç ‚ö°")) {
                if (player.isSneaking()) {
                    // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
                    TabletGUI.openQuickStatus(player, plugin);
                } else {
                    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    TabletGUI.openMainMenu(player, plugin);
                }
                event.setCancelled(true);
            }
        }
    }
    
    @EventHandler
    public void onPlayerSwapHandItems(PlayerSwapHandItemsEvent event) {
        Player player = event.getPlayer();
        ItemStack mainHand = player.getInventory().getItemInMainHand();
        
        if (UraniumTablet.isUraniumTablet(mainHand, plugin)) {
            event.setCancelled(true);
            
            UraniumTablet.TabletType type = UraniumTablet.getTabletType(mainHand, plugin);
            if (type != null && type.ordinal() >= UraniumTablet.TabletType.ADVANCED.ordinal()) {
                if (UraniumTablet.consumeEnergy(mainHand, plugin, 75)) {
                    createAdvancedHolographicProjection(player, mainHand);
                } else {
                    showLowEnergyWarning(player);
                }
            } else {
                player.sendMessage(Component.text("‚ö†Ô∏è –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–ª–∞–Ω—à–µ—Ç–æ–≤!", 
                    NamedTextColor.YELLOW));
            }
        }
    }
    
    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack item = event.getItemDrop().getItemStack();
        
        if (UraniumTablet.isUraniumTablet(item, plugin)) {
            event.setCancelled(true);
            
            Player player = event.getPlayer();
            player.sendMessage(Component.text("üõ°Ô∏è –ü–ª–∞–Ω—à–µ—Ç –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!", 
                NamedTextColor.RED, TextDecoration.BOLD));
            player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.8f);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞—â–∏—Ç—ã
            player.spawnParticle(Particle.BARRIER, player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 0);
        }
    }
    
    @EventHandler
    public void onPlayerItemHeld(PlayerItemHeldEvent event) {
        Player player = event.getPlayer();
        ItemStack newItem = player.getInventory().getItem(event.getNewSlot());
        
        if (UraniumTablet.isUraniumTablet(newItem, plugin)) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –ø–ª–∞–Ω—à–µ—Ç–∞ –≤ —Ä—É–∫–∏
            UraniumTablet.TabletType type = UraniumTablet.getTabletType(newItem, plugin);
            int energy = UraniumTablet.getTabletEnergy(newItem, plugin);
            
            Component message = Component.text()
                .append(Component.text("üì± ", NamedTextColor.AQUA))
                .append(Component.text(type != null ? type.getDisplayName() : "–ü–ª–∞–Ω—à–µ—Ç", 
                    type != null ? type.getColor() : NamedTextColor.WHITE))
                .append(Component.text(" | ‚ö° " + energy + " —ç–Ω–µ—Ä–≥–∏–∏", NamedTextColor.YELLOW))
                .build();
            
            player.sendActionBar(message);
            
            // –¢–∏—Ö–∏–π –∑–≤—É–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 0.3f, 1.5f);
        }
    }
    
    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player player)) return;
        
        String title = event.getView().getTitle();
        
        if (title.equals(ChatColor.AQUA + "‚ö° –£—Ä–∞–Ω–æ–≤—ã–π –ø–ª–∞–Ω—à–µ—Ç ‚ö°")) {
            handleMainMenuClick(event, player);
        } else if (title.contains("–ú–æ–¥—É–ª–∏ –ø–ª–∞–Ω—à–µ—Ç–∞")) {
            handleModulesInterfaceClick(event, player);
        } else if (title.contains("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—à–µ—Ç–∞")) {
            handleDiagnosticsInterfaceClick(event, player);
        }
    }
    
    private void handleMainMenuClick(InventoryClickEvent event, Player player) {
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || clicked.getType() == Material.AIR) return;
        
        String displayName = clicked.getItemMeta().getDisplayName();
        
        if (displayName.equals(ChatColor.AQUA + "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∞–º–∏")) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º GUI —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥
            player.closeInventory();
            player.sendMessage(ChatColor.YELLOW + "–§—É–Ω–∫—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∏—Ñ—É–≥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!");
            
        } else if (displayName.equals(ChatColor.RED + "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–¥–∏–∞—Ü–∏–∏")) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–¥–∏–∞—Ü–∏–∏
            player.closeInventory();
            int radiation = plugin.getRadiationManager().getRadiation(player.getUniqueId());
            player.sendMessage(ChatColor.RED + "‚ò¢ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–¥–∏–∞—Ü–∏–∏: " + radiation);
            if (radiation > 50) {
                player.sendMessage(ChatColor.YELLOW + "‚ö† –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–¥–∏–∞—Ü–∏–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—Ç—É!");
            }
            
        } else if (displayName.equals(ChatColor.LIGHT_PURPLE + "–°–∏—Å—Ç–µ–º–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏")) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º GUI —Ç–µ–ª–µ–ø–æ—Ä—Ç–æ–≤
            player.closeInventory();
            player.sendMessage(ChatColor.YELLOW + "–§—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ!");
            
        } else if (displayName.equals(ChatColor.LIGHT_PURPLE + "–¢–µ—Ä–º–∏–Ω–∞–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º GUI –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
            List<LaboratoryTerminal> terminals = plugin.getLaboratoryManager().getPlayerTerminals(player.getUniqueId());
            if (terminals.isEmpty()) {
                player.closeInventory();
                player.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!");
                player.sendMessage(ChatColor.YELLOW + "–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.");
            } else {
                LaboratoryTerminal terminal = terminals.get(0);
                player.closeInventory();
                LaboratoryGUI.openMainMenu(player, terminal);
            }
            
        } else if (displayName.equals(ChatColor.GOLD + "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞")) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            player.closeInventory();
            showPlayerStats(player);
        }
    }
    
    private void handleModulesInterfaceClick(InventoryClickEvent event, Player player) {
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        String itemName = clicked.getItemMeta().displayName().toString();
        
        if (itemName.contains("–ù–∞–∑–∞–¥")) {
            TabletGUI.openMainMenu(player, plugin);
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
        for (UraniumTablet.TabletModule module : UraniumTablet.TabletModule.values()) {
            if (itemName.contains(module.getName())) {
                ItemStack tablet = getPlayerTablet(player);
                boolean hasModule = UraniumTablet.hasTabletModule(tablet, plugin, module);
                
                if (hasModule) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è
                    removeTabletModule(player, tablet, module);
                } else {
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è
                    installTabletModule(player, tablet, module);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                TabletGUI.openModulesInterface(player, plugin);
                break;
            }
        }
    }
    
    private void handleDiagnosticsInterfaceClick(InventoryClickEvent event, Player player) {
        event.setCancelled(true);
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        String itemName = clicked.getItemMeta().displayName().toString();
        ItemStack tablet = getPlayerTablet(player);
        
        if (itemName.contains("–ù–∞–∑–∞–¥")) {
            TabletGUI.openMainMenu(player, plugin);
        } else if (itemName.contains("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")) {
            if (UraniumTablet.consumeEnergy(tablet, plugin, 50)) {
                runPerformanceTest(player);
            } else {
                showLowEnergyWarning(player);
            }
        } else if (itemName.contains("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞")) {
            if (UraniumTablet.consumeEnergy(tablet, plugin, 100)) {
                runCalibration(player, tablet);
            } else {
                showLowEnergyWarning(player);
            }
        } else if (itemName.contains("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫")) {
            confirmFactoryReset(player, tablet);
        }
    }
    
    private void showPlayerStats(Player player) {
        player.sendMessage(ChatColor.GOLD + "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        player.sendMessage(ChatColor.YELLOW + "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + player.getName());
        player.sendMessage(ChatColor.GOLD + "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // –†–∞–¥–∏–∞—Ü–∏—è
        int radiation = plugin.getRadiationManager().getRadiation(player.getUniqueId());
        player.sendMessage(ChatColor.WHITE + "‚ò¢ –†–∞–¥–∏–∞—Ü–∏—è: " + ChatColor.RED + radiation);
        
        // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        List<LaboratoryTerminal> terminals = plugin.getLaboratoryManager().getPlayerTerminals(player.getUniqueId());
        player.sendMessage(ChatColor.WHITE + "üî¨ –¢–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏: " + ChatColor.LIGHT_PURPLE + terminals.size());
        
        if (!terminals.isEmpty()) {
            LaboratoryTerminal terminal = terminals.get(0);
            player.sendMessage(ChatColor.WHITE + "üìö –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: " + ChatColor.GREEN + 
                terminal.getCompletedResearch().size());
            player.sendMessage(ChatColor.WHITE + "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: " + ChatColor.YELLOW + 
                terminal.getActiveResearch().size());
        }
        
        // –¶–µ–Ω—Ç—Ä–∏—Ñ—É–≥–∏
        int centrifuges = plugin.getCentrifugeManager().getPlayerCentrifuges(player.getUniqueId()).size();
        player.sendMessage(ChatColor.WHITE + "‚öô –¶–µ–Ω—Ç—Ä–∏—Ñ—É–≥: " + ChatColor.AQUA + centrifuges);
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç—ã
        int teleporters = plugin.getTeleporterManager().getPlayerTeleporters(player.getUniqueId()).size();
        player.sendMessage(ChatColor.WHITE + "üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–æ–≤: " + ChatColor.LIGHT_PURPLE + teleporters);
        
        player.sendMessage(ChatColor.GOLD + "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    }
    
    private void createAdvancedHolographicProjection(Player player, ItemStack tablet) {
        if (isOnHologramCooldown(player)) {
            player.sendMessage(Component.text("‚è∞ –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è...", 
                NamedTextColor.YELLOW));
            return;
        }
        
        setHologramCooldown(player, 10000); // 10 —Å–µ–∫—É–Ω–¥
        
        player.sendMessage(Component.text("üåå –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏...", 
            NamedTextColor.LIGHT_PURPLE, TextDecoration.BOLD));
        
        // –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø—Ä–æ–µ–∫—Ü–∏—é
        Location loc = player.getLocation().add(0, 3, 0);
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–æ–ª–æ–≥—Ä–∞–º–º—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (hologramTasks.containsKey(player.getUniqueId())) {
            Bukkit.getScheduler().cancelTask(hologramTasks.get(player.getUniqueId()));
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≥—Ä–∞–º–º—É
        int taskId = new BukkitRunnable() {
            int ticks = 0;
            
            @Override
            public void run() {
                if (ticks >= 200) { // 10 —Å–µ–∫—É–Ω–¥
                    this.cancel();
                    hologramTasks.remove(player.getUniqueId());
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                double angle = ticks * 0.1;
                for (int i = 0; i < 8; i++) {
                    double x = Math.cos(angle + i * Math.PI / 4) * 2;
                    double z = Math.sin(angle + i * Math.PI / 4) * 2;
                    double y = Math.sin(ticks * 0.05) * 0.5;
                    
                    Location particleLoc = loc.clone().add(x, y, z);
                    player.getWorld().spawnParticle(Particle.END_ROD, particleLoc, 1, 0, 0, 0, 0);
                    player.getWorld().spawnParticle(Particle.PORTAL, particleLoc, 2, 0.1, 0.1, 0.1, 0);
                }
                
                ticks++;
            }
        }.runTaskTimer(plugin, 0L, 1L).getTaskId();
        
        hologramTasks.put(player.getUniqueId(), taskId);
        
        // –ó–≤—É–∫–∏ –≥–æ–ª–æ–≥—Ä–∞–º–º—ã
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_POWER_SELECT, 1.0f, 1.8f);
    }
    
    private void startEnergyRegenerationTask() {
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : Bukkit.getOnlinePlayers()) {
                    regenerateTabletEnergy(player);
                }
            }
        }.runTaskTimer(plugin, 0L, 600L); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    private void regenerateTabletEnergy(Player player) {
        ItemStack mainHand = player.getInventory().getItemInMainHand();
        ItemStack offHand = player.getInventory().getItemInOffHand();
        
        regenerateItemEnergy(mainHand, player);
        regenerateItemEnergy(offHand, player);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && UraniumTablet.isUraniumTablet(item, plugin)) {
                regenerateItemEnergy(item, player);
            }
        }
    }
    
    private void regenerateItemEnergy(ItemStack item, Player player) {
        if (!UraniumTablet.isUraniumTablet(item, plugin)) return;
        
        UraniumTablet.TabletType type = UraniumTablet.getTabletType(item, plugin);
        if (type == null) return;
        
        Set<UraniumTablet.TabletModule> modules = UraniumTablet.getTabletModules(item, plugin);
        int regenRate = UraniumTablet.getEnergyRegenRate(type, modules);
        int currentEnergy = UraniumTablet.getTabletEnergy(item, plugin);
        int maxEnergy = type.getMaxEnergy();
        
        if (currentEnergy < maxEnergy) {
            int newEnergy = Math.min(currentEnergy + regenRate, maxEnergy);
            UraniumTablet.setTabletEnergy(item, plugin, newEnergy);
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–π –∑–∞—Ä—è–¥–∫–µ
            if (currentEnergy < maxEnergy && newEnergy == maxEnergy) {
                player.sendMessage(Component.text("üîã –ü–ª–∞–Ω—à–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω!", 
                    NamedTextColor.GREEN, TextDecoration.BOLD));
                player.playSound(player.getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 0.8f, 1.5f);
            }
        }
    }
    
    private void startPerformanceMonitoring() {
        new BukkitRunnable() {
            @Override
            public void run() {
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤
                for (Player player : Bukkit.getOnlinePlayers()) {
                    monitorTabletPerformance(player);
                }
            }
        }.runTaskTimer(plugin, 0L, 1200L); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    private void monitorTabletPerformance(Player player) {
        ItemStack tablet = getPlayerTablet(player);
        if (tablet == null) return;
        
        UraniumTablet.TabletType type = UraniumTablet.getTabletType(tablet, plugin);
        int energy = UraniumTablet.getTabletEnergy(tablet, plugin);
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
        if (type != null) {
            double energyPercent = (double) energy / type.getMaxEnergy() * 100;
            
            if (energyPercent <= 10 && energyPercent > 5) {
                player.sendMessage(Component.text("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –ø–ª–∞–Ω—à–µ—Ç–∞: " + String.format("%.1f%%", energyPercent), 
                    NamedTextColor.YELLOW));
                player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 0.5f, 0.8f);
            } else if (energyPercent <= 5) {
                player.sendMessage(Component.text("üîã –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ô –ó–ê–†–Ø–î: " + String.format("%.1f%%", energyPercent), 
                    NamedTextColor.RED, TextDecoration.BOLD));
                player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);
                
                // –≠—Ñ—Ñ–µ–∫—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
                player.spawnParticle(Particle.REDSTONE, player.getLocation().add(0, 1, 0), 10, 
                    0.5, 0.5, 0.5, 0, new Particle.DustOptions(Color.RED, 1.0f));
            }
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private boolean isOnCooldown(Player player) {
        long lastUseTime = lastUse.getOrDefault(player.getUniqueId(), 0L);
        return System.currentTimeMillis() - lastUseTime < 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    }
    
    private void setCooldown(Player player, long cooldown) {
        lastUse.put(player.getUniqueId(), System.currentTimeMillis() + cooldown);
    }
    
    private boolean isOnHologramCooldown(Player player) {
        long lastHologramTime = lastHologram.getOrDefault(player.getUniqueId(), 0L);
        return System.currentTimeMillis() - lastHologramTime < 10000; // 10 —Å–µ–∫—É–Ω–¥
    }
    
    private void setHologramCooldown(Player player, long cooldown) {
        lastHologram.put(player.getUniqueId(), System.currentTimeMillis() + cooldown);
    }
    
    private ItemStack getPlayerTablet(Player player) {
        ItemStack mainHand = player.getInventory().getItemInMainHand();
        if (UraniumTablet.isUraniumTablet(mainHand, plugin)) {
            return mainHand;
        }
        
        ItemStack offHand = player.getInventory().getItemInOffHand();
        if (UraniumTablet.isUraniumTablet(offHand, plugin)) {
            return offHand;
        }
        
        return null;
    }
    
    private void showLowEnergyWarning(Player player) {
        player.sendMessage(Component.text("‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏!", 
            NamedTextColor.RED, TextDecoration.BOLD));
        player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
        player.spawnParticle(Particle.REDSTONE, player.getLocation().add(0, 1, 0), 5, 
            0.3, 0.3, 0.3, 0, new Particle.DustOptions(Color.YELLOW, 1.0f));
    }
    
    private NamedTextColor getEnergyColor(int energy, int maxEnergy) {
        double percent = (double) energy / maxEnergy * 100;
        if (percent > 75) return NamedTextColor.GREEN;
        if (percent > 50) return NamedTextColor.YELLOW;
        if (percent > 25) return NamedTextColor.GOLD;
        return NamedTextColor.RED;
    }
    
    private NamedTextColor getRadiationColor(int radiation) {
        if (radiation >= 80) return NamedTextColor.DARK_RED;
        if (radiation >= 60) return NamedTextColor.RED;
        if (radiation >= 40) return NamedTextColor.GOLD;
        if (radiation >= 20) return NamedTextColor.YELLOW;
        return NamedTextColor.GREEN;
    }
    
    private void installTabletModule(Player player, ItemStack tablet, UraniumTablet.TabletModule module) {
        UraniumTablet.addTabletModule(tablet, plugin, module);
        player.sendMessage(Component.text("‚úÖ –ú–æ–¥—É–ª—å '" + module.getName() + "' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", 
            NamedTextColor.GREEN));
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 1.2f);
    }
    
    private void removeTabletModule(Player player, ItemStack tablet, UraniumTablet.TabletModule module) {
        // –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ UraniumTablet)
        player.sendMessage(Component.text("‚ùå –ú–æ–¥—É–ª—å '" + module.getName() + "' —É–¥–∞–ª–µ–Ω!", 
            NamedTextColor.RED));
        player.playSound(player.getLocation(), Sound.UI_BUTTON_CLICK, 1.0f, 0.8f);
    }
    
    private void runPerformanceTest(Player player) {
        player.sendMessage(Component.text("üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...", NamedTextColor.AQUA));
        player.closeInventory();
        
        new BukkitRunnable() {
            @Override
            public void run() {
                player.sendMessage(Component.text("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!", 
                    NamedTextColor.GREEN));
                player.playSound(player.getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);
            }
        }.runTaskLater(plugin, 60L);
    }
    
    private void runCalibration(Player player, ItemStack tablet) {
        player.sendMessage(Component.text("üéØ –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...", NamedTextColor.BLUE));
        player.closeInventory();
        
        new BukkitRunnable() {
            @Override
            public void run() {
                player.sendMessage(Component.text("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", NamedTextColor.GREEN));
                player.playSound(player.getLocation(), Sound.BLOCK_BEACON_POWER_SELECT, 1.0f, 1.5f);
            }
        }.runTaskLater(plugin, 80L);
    }
    
    private void confirmFactoryReset(Player player, ItemStack tablet) {
        player.sendMessage(Component.text("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)", NamedTextColor.YELLOW));
        player.closeInventory();
    }
}
